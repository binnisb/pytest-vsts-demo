{
  "options": [{
    "enabled": false,
    "definition": {
      "id": "5d58cc01-7c75-450c-be18-a388ddb129ec"
    },
    "inputs": {
      "branchFilters": "[\"+refs/heads/*\"]",
      "additionalFields": "{}"
    }
  }, {
    "enabled": false,
    "definition": {
      "id": "a9db38f9-9fdc-478c-b0f9-464221e58316"
    },
    "inputs": {
      "workItemType": "1764259",
      "assignToRequestor": "true",
      "additionalFields": "{}"
    }
  }],
  "triggers": [{
    "branchFilters": ["+refs/heads/master"],
    "pathFilters": [],
    "batchChanges": false,
    "maxConcurrentBuildsPerBranch": 1,
    "pollingInterval": 0,
    "triggerType": 2
  }],
  "variables": {
    "system.debug": {
      "value": "true",
      "allowOverride": true
    }
  },
  "retentionRules": [{
    "branches": ["+refs/heads/*"],
    "artifacts": [],
    "artifactTypesToDelete": ["FilePath", "SymbolStore"],
    "daysToKeep": 10,
    "minimumToKeep": 1,
    "deleteBuildRecord": true,
    "deleteTestResults": true
  }],
  "properties": {},
  "tags": [],
  "metrics": [{
    "name": "CurrentBuildsInQueue",
    "scope": "refs/heads/master",
    "intValue": 0
  }, {
    "name": "CurrentBuildsInProgress",
    "scope": "refs/heads/master",
    "intValue": 0
  }, {
    "name": "CanceledBuilds",
    "scope": "refs/heads/master",
    "intValue": 0,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "FailedBuilds",
    "scope": "refs/heads/master",
    "intValue": 4,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "PartiallySuccessfulBuilds",
    "scope": "refs/heads/master",
    "intValue": 0,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "SuccessfulBuilds",
    "scope": "refs/heads/master",
    "intValue": 0,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "TotalBuilds",
    "scope": "refs/heads/master",
    "intValue": 4,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "CurrentBuildsInQueue",
    "scope": "refs/pull/*",
    "intValue": 0
  }, {
    "name": "CurrentBuildsInProgress",
    "scope": "refs/pull/*",
    "intValue": 0
  }, {
    "name": "CanceledBuilds",
    "scope": "refs/pull/*",
    "intValue": 0,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "FailedBuilds",
    "scope": "refs/pull/*",
    "intValue": 1,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "PartiallySuccessfulBuilds",
    "scope": "refs/pull/*",
    "intValue": 0,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "SuccessfulBuilds",
    "scope": "refs/pull/*",
    "intValue": 1,
    "date": "2018-03-18T00:00:00.000Z"
  }, {
    "name": "TotalBuilds",
    "scope": "refs/pull/*",
    "intValue": 2,
    "date": "2018-03-18T00:00:00.000Z"
  }],
  "_links": {
    "self": {
      "href": ""
    },
    "web": {
      "href": ""
    },
    "editor": {
      "href": ""
    }
  },
  "jobAuthorizationScope": 1,
  "jobTimeoutInMinutes": 60,
  "jobCancelTimeoutInMinutes": 5,
  "process": {
    "phases": [{
      "steps": [{
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "Build an image",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "e28912f1-0114-4464-802a-a3a35437fd16",
          "versionSpec": "0.*",
          "definitionType": "task"
        },
        "inputs": {
          "containerregistrytype": "Container Registry",
          "dockerRegistryEndpoint": "",
          "azureSubscriptionEndpoint": "",
          "azureContainerRegistry": "",
          "action": "Build an image",
          "dockerFile": "**/Dockerfile",
          "buildArguments": "",
          "defaultContext": "false",
          "context": "",
          "imageName": "$(Build.Repository.Name):$(Build.BuildId)",
          "imageNamesPath": "",
          "qualifyImageName": "true",
          "additionalImageTags": "",
          "includeSourceTags": "false",
          "includeLatestTag": "true",
          "imageDigestFile": "",
          "containerName": "",
          "ports": "",
          "volumes": "",
          "envVars": "",
          "workDir": "",
          "entrypoint": "",
          "containerCommand": "",
          "detached": "true",
          "restartPolicy": "no",
          "restartMaxRetries": "",
          "customCommand": "",
          "dockerHostEndpoint": "",
          "enforceDockerNamingConvention": "true",
          "cwd": "$(System.DefaultWorkingDirectory)",
          "memory": ""
        }
      }, {
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "Run pytest",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "e28912f1-0114-4464-802a-a3a35437fd16",
          "versionSpec": "0.*",
          "definitionType": "task"
        },
        "inputs": {
          "containerregistrytype": "Container Registry",
          "dockerRegistryEndpoint": "",
          "azureSubscriptionEndpoint": "",
          "azureContainerRegistry": "",
          "action": "Run an image",
          "dockerFile": "**/Dockerfile",
          "buildArguments": "",
          "defaultContext": "true",
          "context": "",
          "imageName": "$(Build.Repository.Name):$(Build.BuildId)",
          "imageNamesPath": "",
          "qualifyImageName": "true",
          "additionalImageTags": "",
          "includeSourceTags": "false",
          "includeLatestTag": "false",
          "imageDigestFile": "",
          "containerName": "",
          "ports": "",
          "volumes": "$(System.DefaultWorkingDirectory)/artifacts:/results",
          "envVars": "",
          "workDir": "/code/tests",
          "entrypoint": "",
          "containerCommand": "\"pytest --junitxml=/results/testresults.xml --cov-report=xml:/results/cov.xml --cov-report=html:/results/htmlcov --cov=Demo\"",
          "detached": "false",
          "restartPolicy": "no",
          "restartMaxRetries": "",
          "customCommand": "",
          "dockerHostEndpoint": "",
          "enforceDockerNamingConvention": "true",
          "cwd": "$(System.DefaultWorkingDirectory)",
          "memory": ""
        }
      }, {
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "npm install",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "fe47e961-9fa8-4106-8639-368c022d43ad",
          "versionSpec": "1.*",
          "definitionType": "task"
        },
        "inputs": {
          "command": "install",
          "workingDir": "$(System.DefaultWorkingDirectory)/pytest-style-inliner",
          "verbose": "false",
          "customCommand": "",
          "customRegistry": "useNpmrc",
          "customFeed": "",
          "customEndpoint": "",
          "publishRegistry": "useExternalRegistry",
          "publishFeed": "",
          "publishEndpoint": ""
        }
      }, {
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "npm custom",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "fe47e961-9fa8-4106-8639-368c022d43ad",
          "versionSpec": "1.*",
          "definitionType": "task"
        },
        "inputs": {
          "command": "custom",
          "workingDir": "$(System.DefaultWorkingDirectory)/pytest-style-inliner",
          "verbose": "false",
          "customCommand": "run fix --covdir=$(System.DefaultWorkingDirectory)/artifacts/htmlcov",
          "customRegistry": "useNpmrc",
          "customFeed": "",
          "customEndpoint": "",
          "publishRegistry": "useExternalRegistry",
          "publishFeed": "",
          "publishEndpoint": ""
        }
      }, {
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "Publish Test Results testresults.xml",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "0b0f01ed-7dde-43ff-9cbb-e48954daf9b1",
          "versionSpec": "2.*",
          "definitionType": "task"
        },
        "inputs": {
          "testRunner": "JUnit",
          "testResultsFiles": "testresults.xml",
          "searchFolder": "$(System.DefaultWorkingDirectory)/artifacts/",
          "mergeTestResults": "false",
          "testRunTitle": "",
          "platform": "",
          "configuration": "",
          "publishRunAttachments": "true"
        }
      }, {
        "environment": {},
        "enabled": true,
        "continueOnError": false,
        "alwaysRun": false,
        "displayName": "Publish code coverage from $(System.DefaultWorkingDirectory)/artifacts/cov.xml",
        "timeoutInMinutes": 0,
        "condition": "succeeded()",
        "task": {
          "id": "2a7ebc54-c13e-490e-81a5-d7561ab7cd97",
          "versionSpec": "1.*",
          "definitionType": "task"
        },
        "inputs": {
          "codeCoverageTool": "Cobertura",
          "summaryFileLocation": "$(System.DefaultWorkingDirectory)/artifacts/cov.xml",
          "reportDirectory": "$(System.DefaultWorkingDirectory)/artifacts/htmlcov",
          "additionalCodeCoverageFiles": "$(System.DefaultWorkingDirectory)/artifacts/htmlcov/**/*.*",
          "failIfCoverageEmpty": "false"
        }
      }],
      "name": "Phase 1",
      "refName": "Phase_1",
      "condition": "succeeded()",
      "target": {
        "executionOptions": {
          "type": 0
        },
        "allowScriptsAuthAccessOption": true,
        "type": 1
      },
      "jobAuthorizationScope": "projectCollection",
      "jobCancelTimeoutInMinutes": 1
    }],
    "type": 1
  },
  "repository": {
    "properties": {
      "cleanOptions": "0",
      "labelSources": "0",
      "labelSourcesFormat": "$(build.buildNumber)",
      "reportBuildStatus": "true",
      "gitLfsSupport": "false",
      "skipSyncSource": "false",
      "checkoutNestedSubmodules": "false",
      "fetchDepth": "0"
    },
    "id": "5e0f90b4-e2fe-461b-86ef-25162133cd46",
    "type": "TfsGit",
    "name": "Pytest example",
    "url": "",
    "defaultBranch": "refs/heads/master",
    "clean": "false",
    "checkoutSubmodules": false
  },
  "processParameters": {},
  "quality": 1,
  "drafts": [],
  "queue": {
    "_links": {
      "self": {
        "href": ""
      }
    },
    "id": 7,
    "name": "Hosted Linux Preview",
    "url": "",
    "pool": {
      "id": 3,
      "name": "Hosted Linux Preview",
      "isHosted": true
    }
  }
}
